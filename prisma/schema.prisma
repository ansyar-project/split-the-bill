// schema.prisma

generator client {
  provider = "prisma-client-js"
  // output   = "../src/lib/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Optionally use an enum for roles
enum Role {
  admin
  member
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(member) // Role field added here
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  memberships Membership[]
  expenses    Expense[]    @relation("PaidExpenses")

  accounts     Account[]
  sessions     Session[]
  ExpenseSplit ExpenseSplit[]
}

model Group {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  memberships Membership[]
  expenses    Expense[]
  GroupInvite GroupInvite[]
}

model Membership {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  role      String // 'admin' or 'member'
  updatedAt DateTime @updatedAt

  @@unique([userId, groupId])
}

model Expense {
  id        String   @id @default(uuid())
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  title     String
  amount    Float
  paidBy    User     @relation("PaidExpenses", fields: [paidById], references: [id])
  paidById  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  splits ExpenseSplit[]
}

model ExpenseSplit {
  id          String   @id @default(uuid())
  expense     Expense  @relation(fields: [expenseId], references: [id])
  expenseId   String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  shareAmount Float
  updatedAt   DateTime @updatedAt
}

// NextAuth Models

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GroupInvite {
  id        String   @id @default(uuid())
  token     String   @unique
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   String
  createdBy String // User ID of who created the invite
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([token])
}
